# @author: adibarra (Alec Ibarra)
# @description: This file contains the OpenAPI 3.0 documentation for the Fintasy API.

# If editing this file in VSCode, you can use the Swagger Viewer extension to preview the documentation.
# To do so, open the file and press `Ctrl+Shift+P` and type `Preview Swagger`.
# This will open a live preview of the documentation from within VSCode.

# Set openapi version
openapi: 3.0.3

# Set project info
info:
  title: Fintasy - OpenAPI 3.0
  description: |-
    API Documentation for Fintasy - A competitive paper trading platform.
  version: 1.0.0

# Set available api servers
servers:
  - url: http://localhost:3332/api/v1
    description: Development

# Set catagories
tags:
  - name: sessions
    description: Perform operations on sessions
  - name: users
    description: Perform operations on users
  - name: portfolios
    description: Perform operations on portfolios
  - name: transactions
    description: Perform operations on transactions
  - name: tournaments
    description: Perform operations on tournaments
  - name: quotes
    description: Perform operations on quotes

# Set up api routes
paths:
  /sessions:
    post:
      tags:
        - sessions
      summary: Generate a session token
      description: This will generate a session token for the user.
      operationId: createSession
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionPostRequest'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/SessionPostResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

    delete:
      security:
        - bearerAuth: []
      tags:
        - sessions
      summary: Invalidate a session token
      description: This will invalidate the user's current session token.
      operationId: deleteSession
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

  /users:
    post:
      tags:
        - users
      summary: Create user
      description: Creates a new account for a user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPostRequest'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/UserGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

  /users/{uuid}:
    get:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Get user
      description: Gets a user by uuid.
      operationId: getUserByUUID
      parameters:
        - name: uuid
          in: path
          description: The uuid of the user to be fetched
          example: d383865a-df45-4c4c-bc47-b06253b126a6
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/UserGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

    patch:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Partially update user
      description: |
        Partially update a user.
        All properties are optional.
      operationId: updateUser
      parameters:
        - name: uuid
          in: path
          description: The uuid of the user to be updated
          example: d383865a-df45-4c4c-bc47-b06253b126a6
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatchRequest'
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

    delete:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Delete user
      description: Delete user.
      operationId: deleteUser
      parameters:
        - name: uuid
          in: path
          description: The uuid of the user to be deleted
          example: d383865a-df45-4c4c-bc47-b06253b126a6
          required: true
          schema:
            type: string
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

  /portfolios:
    post:
      security:
        - bearerAuth: []
      tags:
        - portfolios
      summary: Create portfolio
      description: Create a new portfolio for a user. Associating to a tournament is optional.
      operationId: createPortfolio
      requestBody:
        description: Created portfolio object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioPostRequest'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/PortfolioGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'
    get:
      security:
        - bearerAuth: []
      tags:
        - portfolios
      summary: Get portfolios
      description: Gets all portfolios which match filters.
      operationId: getPortfolios
      parameters:
        - name: owner
          in: query
          description: The uuid of the owner to fetch portfolios for
          required: false
          schema:
            type: string
            format: uuid
            example: d383865a-df45-4c4c-bc47-b06253b126a6
        - name: tournament
          in: query
          description: The uuid of the tournament to fetch portfolios for
          required: false
          schema:
            type: string
            format: uuid
            example: b980b95e-1d91-4528-9872-5b3ee66098c7
        - name: name
          in: query
          description: The name of the portfolio to fetch
          required: false
          schema:
            type: string
            example: Default
        - name: offset
          in: query
          description: The number of portfolios to skip
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The maximum number of portfolios to return
          required: false
          schema:
            type: integer
            default: 10
            maximum: 50
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/PortfolioGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

  /portfolios/{uuid}:
    get:
      security:
        - bearerAuth: []
      tags:
        - portfolios
      summary: Get portfolio
      description: Gets an portfolio by uuid.
      operationId: getPortfolioByUUID
      parameters:
        - name: uuid
          in: path
          description: The uuid of the portfolio to be fetched
          example: 7b4a6ee5-73fe-4de5-9944-c49009057911
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/PortfolioGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

    patch:
      security:
        - bearerAuth: []
      tags:
        - portfolios
      summary: Partially update portfolio
      description: |
        Partially update an portfolio.
        All properties are optional.
      operationId: updatePortfolio
      parameters:
        - name: uuid
          in: path
          description: The uuid of the portfolio to be updated
          example: 7b4a6ee5-73fe-4de5-9944-c49009057911
          required: true
          schema:
            type: string
      requestBody:
        description: Updated portfolio object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioPatchRequest'
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

    delete:
      security:
        - bearerAuth: []
      tags:
        - portfolios
      summary: Delete portfolio
      description: Delete portfolio.
      operationId: deletePortfolio
      parameters:
        - name: uuid
          in: path
          description: The uuid of the portfolio to be deleted
          example: 7b4a6ee5-73fe-4de5-9944-c49009057911
          required: true
          schema:
            type: string
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

  /transactions:
    post:
      security:
        - bearerAuth: []
      tags:
        - transactions
      summary: Create transaction
      description: Create a new transaction for an portfolio.
      operationId: createTransaction
      requestBody:
        description: Created transaction object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionPostRequest'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/TransactionGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'
    get:
      security:
        - bearerAuth: []
      tags:
        - transactions
      summary: Get transactions
      description: Gets all transactions which match filters.
      operationId: getTransactions
      parameters:
        - name: portfolio
          in: query
          description: The uuid of the portfolio to fetch transactions for
          example: 7b4a6ee5-73fe-4de5-9944-c49009057911
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: The number of transactions to skip
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The maximum number of transactions to return
          required: false
          schema:
            type: integer
            default: 10
            maximum: 50
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TransactionGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

  /transactions/{uuid}:
    get:
      security:
        - bearerAuth: []
      tags:
        - transactions
      summary: Get transaction
      description: Gets a transaction by uuid.
      operationId: getTransactionByUUID
      parameters:
        - name: uuid
          in: path
          description: The uuid of the transaction to be fetched
          example: 177d58d6-c33e-465b-a71f-b738a052d13f
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/TransactionGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

  /tournaments:
    post:
      security:
        - bearerAuth: []
      tags:
        - tournaments
      summary: Create tournament
      description: Create a new tournament for a user.
      operationId: createTournament
      requestBody:
        description: Created tournament object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentPostRequest'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/TournamentGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

    get:
      security:
        - bearerAuth: []
      tags:
        - tournaments
      summary: Get tournaments
      description: Gets all tournaments which match filters.
      operationId: getTournaments
      parameters:
        - name: owner
          in: query
          description: The uuid of the owner to fetch tournaments for
          required: false
          schema:
            type: string
            format: uuid
            example: d383865a-df45-4c4c-bc47-b06253b126a6
        - name: name
          in: query
          description: The name of the tournament to fetch
          required: false
          schema:
            type: string
            example: Default
        - name: status
          in: query
          description: The status of the tournament to fetch
          required: false
          schema:
            $ref: '#/components/schemas/TournamentStatus'
        - name: start_date
          in: query
          description: The start date of the tournament to fetch
          required: false
          schema:
            type: string
            format: date-time
            example: 1970-01-01T00:00:00Z
        - name: end_date
          in: query
          description: The end date of the tournament to fetch
          required: false
          schema:
            type: string
            format: date-time
            example: 1970-01-01T00:00:00Z
        - name: offset
          in: query
          description: The number of tournaments to skip
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The maximum number of tournaments to return
          required: false
          schema:
            type: integer
            default: 10
            maximum: 50
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TournamentGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

  /tournaments/{uuid}:
    get:
      security:
        - bearerAuth: []
      tags:
        - tournaments
      summary: Get tournament
      description: Gets a tournament by uuid.
      operationId: getTournamentByUUID
      parameters:
        - name: uuid
          in: path
          description: The uuid of the tournament to be fetched
          example: b980b95e-1d91-4528-9872-5b3ee66098c7
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/TournamentGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

    patch:
      security:
        - bearerAuth: []
      tags:
        - tournaments
      summary: Partially update tournament
      description: |
        Partially update a tournament.
        All properties are optional.
      operationId: updateTournament
      parameters:
        - name: uuid
          in: path
          description: The uuid of the tournament to be updated
          example: b980b95e-1d91-4528-9872-5b3ee66098c7
          required: true
          schema:
            type: string
      requestBody:
        description: Updated tournament object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentPatchRequest'
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

    delete:
      security:
        - bearerAuth: []
      tags:
        - tournaments
      summary: Delete tournament
      description: Delete tournament.
      operationId: deleteTournament
      parameters:
        - name: uuid
          in: path
          description: The uuid of the tournament to be deleted
          example: b980b95e-1d91-4528-9872-5b3ee66098c7
          required: true
          schema:
            type: string
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

  /quotes/{symbol}:
    get:
      security:
        - bearerAuth: []
      tags:
        - quotes
      summary: Get quote
      description: Gets a quote for a symbol.
      operationId: getQuoteBySymbol
      parameters:
        - name: symbol
          in: path
          description: The symbol of the quote to be fetched
          example: AAPL
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/QuoteGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

  /quotes/{symbol}/historical:
    get:
      security:
        - bearerAuth: []
      tags:
        - quotes
      summary: Get historical quotes
      description: Gets historical quotes for a symbol.
      operationId: getHistoricalQuotesBySymbol
      parameters:
        - name: symbol
          in: path
          description: The symbol of the quote to be fetched
          example: AAPL
          required: true
          schema:
            type: string
        - name: start_date
          in: query
          description: The start date of the quotes to fetch
          required: true
          schema:
            type: string
            format: date-time
            example: 1970-01-01T00:00:00Z
        - name: end_date
          in: query
          description: The end date of the quotes to fetch
          required: true
          schema:
            type: string
            format: date-time
            example: 1970-01-01T00:00:00Z
        - name: interval
          in: query
          description: The interval to aggregate the quotes by
          required: true
          schema:
            $ref: '#/components/schemas/HistoricalInterval'
        - name: limit
          in: query
          description: The maximum number of quotes to return
          required: false
          schema:
            type: integer
            default: 10
            maximum: 50
        - name: offset
          in: query
          description: The number of quotes to skip
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/QuoteGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

components:
  responses:
    APIResponseAll:
      description: Returned for all status codes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIResponse'
          examples:
            '200':
              $ref: '#/components/examples/200'
            '400':
              $ref: '#/components/examples/400'
            '401':
              $ref: '#/components/examples/401'
            '403':
              $ref: '#/components/examples/403'
            '404':
              $ref: '#/components/examples/404'
            '409':
              $ref: '#/components/examples/409'
            '500':
              $ref: '#/components/examples/500'

    APIResponseError:
      description: An error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIResponse'
          examples:
            '400':
              $ref: '#/components/examples/400'
            '401':
              $ref: '#/components/examples/401'
            '403':
              $ref: '#/components/examples/403'
            '404':
              $ref: '#/components/examples/404'
            '409':
              $ref: '#/components/examples/409'
            '500':
              $ref: '#/components/examples/500'

  schemas:
    # Enum for transaction action
    TransactionAction:
      type: string
      enum:
        - BUY
        - SELL

    # Enum for tournament status
    TournamentStatus:
      type: string
      enum:
        - SCHEDULED
        - ONGOING
        - FINISHED

    # Enum for historical interval
    HistoricalInterval:
      type: string
      enum:
        - 5m
        - 15m
        - 30m
        - 1h
        - 1d

    # Schema for base API response
    APIResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Ok

    # Schema for POST /sessions
    SessionPostRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: c00lm4n
        password:
          type: string
          example: a1b2c3d4e5f6

    # Schema for POST /sessions
    SessionPostResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: xxxxxxxxxxxx
        uuid:
          type: string
          format: uuid
          example: d383865a-df45-4c4c-bc47-b06253b126a6

    # Schema for POST /users
    UserPostRequest:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
          format: email
          example: cool@example.com
        username:
          type: string
          example: c00lm4n
        password:
          type: string
          example: a1b2c3d4e5f6

    # Schema for PATCH /users/{uuid}
    UserPatchRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: cool@example.com
        username:
          type: string
          example: c00lm4n
        password:
          type: string
          example: a1b2c3d4e5f6

    # Schema for GET /users/{uuid}
    UserGetResponse:
      type: object
      required:
        - uuid
        - email
        - username
        - coins
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          format: uuid
          example: d383865a-df45-4c4c-bc47-b06253b126a6
        email:
          type: string
          format: email
          example: cool@example.com
        username:
          type: string
          example: c00lm4n
        coins:
          type: number
          example: 10
        created_at:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z

    # Schema for POST /portfolios
    PortfolioPostRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Default
        tournament:
          type: string
          format: uuid
          example: b980b95e-1d91-4528-9872-5b3ee66098c7

    # Schema for GET /portfolios/{uuid}
    PortfolioGetResponse:
      type: object
      required:
        - uuid
        - owner
        - name
        - balance_cents
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          format: uuid
          example: 7b4a6ee5-73fe-4de5-9944-c49009057911
        owner:
          type: string
          format: uuid
          example: d383865a-df45-4c4c-bc47-b06253b126a6
        tournament:
          type: string
          format: uuid
          example: b980b95e-1d91-4528-9872-5b3ee66098c7
        name:
          type: string
          example: Default
        balance_cents:
          type: number
          example: 10000000
        created_at:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z

    # Schema for PATCH /portfolios/{uuid}
    PortfolioPatchRequest:
      type: object
      properties:
        name:
          type: string
          example: Default

    # Schema for POST /transactions
    TransactionPostRequest:
      type: object
      required:
        - portfolio
        - symbol
        - action
        - quantity
      properties:
        portfolio:
          type: string
          format: uuid
          example: 7b4a6ee5-73fe-4de5-9944-c49009057911
        symbol:
          type: string
          example: AAPL
        action:
          $ref: '#/components/schemas/TransactionAction'
        quantity:
          type: integer
          example: 10

    # Schema for GET /transactions/{uuid}
    TransactionGetResponse:
      type: object
      required:
        - uuid
        - portfolio
        - symbol
        - action
        - quantity
        - price_cents
        - created_at
      properties:
        uuid:
          type: string
          format: uuid
          example: 177d58d6-c33e-465b-a71f-b738a052d13f
        portfolio:
          type: string
          format: uuid
          example: 7b4a6ee5-73fe-4de5-9944-c49009057911
        symbol:
          type: string
          example: AAPL
        action:
          $ref: '#/components/schemas/TransactionAction'
        quantity:
          type: integer
          example: 10
        price_cents:
          type: number
          example: 1000000
        created_at:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z

    # Schema for POST /tournaments
    TournamentPostRequest:
      type: object
      required:
        - name
        - start_date
        - end_date
      properties:
        name:
          type: string
          example: Default
        start_date:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z
        end_date:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z

    # Schema for GET /tournaments
    TournamentGetResponse:
      type: object
      required:
        - uuid
        - owner
        - name
        - status
        - start_date
        - end_date
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          format: uuid
          example: b980b95e-1d91-4528-9872-5b3ee66098c7
        owner:
          type: string
          format: uuid
          example: d383865a-df45-4c4c-bc47-b06253b126a6
        name:
          type: string
          example: Default
        status:
          $ref: '#/components/schemas/TournamentStatus'
        start_date:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z
        end_date:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z
        created_at:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z

    # Schema for PATCH /tournaments/{uuid}
    TournamentPatchRequest:
      type: object
      properties:
        name:
          type: string
          example: Default
        status:
          $ref: '#/components/schemas/TournamentStatus'
        start_date:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z
        end_date:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z

    # Schema for GET /quotes/{symbol}
    QuoteGetResponse:
      type: object
      required:
        - symbol
        - price_cents
        - timestamp
      properties:
        symbol:
          type: string
          example: AAPL
        price_cents:
          type: number
          example: 100000
        timestamp:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z

  # Set up examples
  examples:
    '200':
      value:
        code: 200
        message: Ok
    '400':
      value:
        code: 400
        message: Bad Request
    '401':
      value:
        code: 401
        message: Unauthorized
    '403':
      value:
        code: 403
        message: Forbidden
    '404':
      value:
        code: 404
        message: Not Found
    '409':
      value:
        code: 409
        message: Conflict
    '500':
      value:
        code: 500
        message: Internal Server Error

  # Register authentication
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
