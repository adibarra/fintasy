# If editing this file in VSCode, you can use the Swagger Viewer extension to preview the documentation.
# To do so, open the file and press `Ctrl+Shift+P` and type `Preview Swagger`.
# This will open a live preview of the documentation from within VSCode.

# Set openapi version
openapi: 3.0.3

# Set project info
info:
  title: Fintasy - OpenAPI 3.0
  description: |-
    API Documentation for Fintasy: A competitive paper trading platform.
  version: 1.0.0

# Set available api servers
servers:
  - url: http://localhost:3332/api/v1
    description: Development

# Set catagories
tags:
  - name: accounts
    description: Perform operations on accounts
  - name: transactions
    description: Perform operations on transactions
  - name: users
    description: Perform operations on users

# Set up api routes
paths:
  /accounts:
    post:
      security:
        - bearerAuth: []
      tags:
        - accounts
      summary: Create account
      description: Create a new account for a user.
      operationId: createAccount
      requestBody:
        description: Created account object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPostRequest'
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

  /accounts/{uuid}:
    get:
      security:
        - bearerAuth: []
      tags:
        - accounts
      summary: Get account
      description: Gets an account by uuid.
      operationId: getAccountByUUID
      parameters:
        - name: uuid
          in: path
          description: The uuid of the account to be fetched
          example: d383865a-df45-4c4c-bc47-b06253b126a6
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/AccountGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

    patch:
      security:
        - bearerAuth: []
      tags:
        - accounts
      summary: Partially update account
      description: |
        Partially update an account.
        All properties are optional.
      operationId: updateAccount
      parameters:
        - name: uuid
          in: path
          description: The uuid of the account to be updated
          example: 7b4a6ee5-73fe-4de5-9944-c49009057911
          required: true
          schema:
            type: string
      requestBody:
        description: Updated account object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPatchRequest'
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

    delete:
      security:
        - bearerAuth: []
      tags:
        - accounts
      summary: Delete account
      description: Delete account.
      operationId: deleteAccount
      parameters:
        - name: uuid
          in: path
          description: The uuid of the account to be deleted
          example: 7b4a6ee5-73fe-4de5-9944-c49009057911
          required: true
          schema:
            type: string
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

  /auth:
    post:
      tags:
        - users
      summary: Authenticate user
      description: Authenticate a user.
      operationId: authenticateUser
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthPostRequest'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthPostResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

  /transactions:
    post:
      security:
        - bearerAuth: []
      tags:
        - transactions
      summary: Create transaction
      description: Create a new transaction for an account.
      operationId: createTransaction
      requestBody:
        description: Created transaction object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionPostRequest'
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

  /transactions/{uuid}:
    get:
      security:
        - bearerAuth: []
      tags:
        - transactions
      summary: Get transaction
      description: Gets a transaction by uuid.
      operationId: getTransactionByUUID
      parameters:
        - name: uuid
          in: path
          description: The uuid of the transaction to be fetched
          example:  177d58d6-c33e-465b-a71f-b738a052d13f
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/TransactionGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

  /users:
    post:
      tags:
        - users
      summary: Create user
      description: Creates a new account for a user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPostRequest'
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

  /users/{uuid}:
    get:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Get user
      description: Gets a user by uuid.
      operationId: getUserByUUID
      parameters:
        - name: uuid
          in: path
          description: The uuid of the user to be fetched
          example: d383865a-df45-4c4c-bc47-b06253b126a6
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: '#/components/schemas/UserGetResponse'
        default:
          $ref: '#/components/responses/APIResponseError'

    patch:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Partially update user
      description: |
        Partially update a user.
        All properties are optional.
      operationId: updateUser
      parameters:
        - name: uuid
          in: path
          description: The uuid of the user to be updated
          example: d383865a-df45-4c4c-bc47-b06253b126a6
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatchRequest'
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

    delete:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Delete user
      description: Delete user.
      operationId: deleteUser
      parameters:
        - name: uuid
          in: path
          description: The uuid of the user to be deleted
          example: d383865a-df45-4c4c-bc47-b06253b126a6
          required: true
          schema:
            type: string
      responses:
        default:
          $ref: '#/components/responses/APIResponseAll'

components:
  responses:
    APIResponseAll:
      description: Returned for all status codes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIResponse'
          examples:
            '200':
              $ref: '#/components/examples/200'
            '400':
              $ref: '#/components/examples/400'
            '401':
              $ref: '#/components/examples/401'
            '404':
              $ref: '#/components/examples/404'
            '500':
              $ref: '#/components/examples/500'

    APIResponseError:
      description: An error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIResponse'
          examples:
            '400':
              $ref: '#/components/examples/400'
            '401':
              $ref: '#/components/examples/401'
            '404':
              $ref: '#/components/examples/404'
            '500':
              $ref: '#/components/examples/500'

  schemas:
    # Schema for base API response
    APIResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Ok

    # Schema for POST /accounts
    AccountPostRequest:
      type: object
      required:
        - name
        - tournament
      properties:
        name:
          type: string
          format: uuid
          example: Default
        tournament:
          type: string
          format: uuid
          example: d383865a-df45-4c4c-bc47-b06253b126a6

    # Schema for GET /accounts/{uuid}
    AccountGetResponse:
      type: object
      required:
        - uuid
        - owner
        - tournament
        - name
        - balance
        - created_at
      properties:
        uuid:
          type: string
          format: uuid
          example: 7b4a6ee5-73fe-4de5-9944-c49009057911
        owner:
          type: string
          format: uuid
          example: d383865a-df45-4c4c-bc47-b06253b126a6
        tournament:
          type: string
          format: uuid
          example: d383865a-df45-4c4c-bc47-b06253b126a6
        name:
          type: string
          example: Default
        balance:
          type: number
          format: float
          example: 100_000.00
        created_at:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z

    # Schema for PATCH /accounts/{uuid}
    AccountPatchRequest:
      type: object
      properties:
        name:
          type: string
          example: Default

    # Schema for POST /auth
    AuthPostRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: cool@example.com
        password:
          type: string
          example: a1b2c3d4e5f6

    # Schema for POST /auth
    AuthPostResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: xxxxxxxxxxxx

    # Schema for POST /transactions
    TransactionPostRequest:
      type: object
      required:
        - account
        - symbol
        - action
        - quantity
      properties:
        account:
          type: string
          format: uuid
          example: 7b4a6ee5-73fe-4de5-9944-c49009057911
        symbol:
          type: string
          example: AAPL
        action:
          type: string
          example: BUY
        quantity:
          type: integer
          example: 10

    # Schema for GET /transactions/{uuid}
    TransactionGetResponse:
      type: object
      required:
        - uuid
        - account
        - symbol
        - action
        - quantity
        - price
        - created_at
      properties:
        uuid:
          type: string
          format: uuid
          example: 177d58d6-c33e-465b-a71f-b738a052d13f
        account:
          type: string
          format: uuid
          example: 7b4a6ee5-73fe-4de5-9944-c49009057911
        symbol:
          type: string
          example: AAPL
        action:
          type: string
          example: BUY
        quantity:
          type: integer
          example: 10
        price:
          type: number
          format: float
          example: 10_000.00
        created_at:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z

    # Schema for POST /users
    UserPostRequest:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
          format: email
          example: cool@example.com
        username:
          type: string
          example: c00lm4n
        password:
          type: string
          example: a1b2c3d4e5f6

    # Schema for PATCH /users/{uuid}
    UserPatchRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: cool@example.com
        username:
          type: string
          example: c00lm4n
        password:
          type: string
          example: a1b2c3d4e5f6

    # Schema for GET /users/{uuid}
    UserGetResponse:
      type: object
      required:
        - uuid
        - email
        - username
        - created_at
      properties:
        uuid:
          type: string
          format: uuid
          example: d383865a-df45-4c4c-bc47-b06253b126a6
        email:
          type: string
          format: email
          example: cool@example.com
        username:
          type: string
          example: c00lm4n
        created_at:
          type: string
          format: date-time
          example: 1970-01-01T00:00:00Z

  # Set up examples
  examples:
    '200':
      value:
        code: 200
        message: Ok
    '400':
      value:
        code: 400
        message: Bad Request
    '401':
      value:
        code: 401
        message: Unauthorized
    '404':
      value:
        code: 404
        message: Not Found
    '500':
      value:
        code: 500
        message: Internal Server Error

  # Register authentication
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
